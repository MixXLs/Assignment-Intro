/* =========================================================
   script.js  ¬∑  Unified JS (fresh build + merged legacy)
   - Utilities, Autocomplete (ARIA)
   - Progress Gate / Special-project Proposal / Exam Submit
   - Sidebar Toggle, KPI format, Task Filter, Link-card A11y
   - Requests (Officer): Tabs + Filters + Detail/Schedule
   - Advisor dashboard + Feedback modal (merged, safe-bind)
   ========================================================= */

/* ---------------------------
   Utilities
--------------------------- */
const $ = (s, r = document) => r.querySelector(s);
const $$ = (s, r = document) => Array.from(r.querySelectorAll(s));

const text = (el, v) => { if (el) el.textContent = String(v); };
const show = (el, display = "block") => { if (el) el.style.display = display; };
const hide = (el) => { if (el) el.style.display = "none"; };
const val = (id) => document.getElementById(id)?.value?.trim() ?? "";
const setVal = (id, v) => { const el = document.getElementById(id); if (el) el.value = v; };
const clamp = (n, a, b) => Math.max(a, Math.min(b, n));

function uniqueNonEmpty(arr) {
  const v = arr.map(s => (s || "").trim()).filter(Boolean);
  return v.length === new Set(v).size;
}

const debounce = (fn, ms = 150) => {
  let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), ms); };
};

const JSONX = {
  parse: (s, fb = null) => { try { return JSON.parse(s); } catch { return fb; } },
  stringify: (o) => { try { return JSON.stringify(o); } catch { return ""; } }
};

const LS = {
  get: (k, fb = null) => JSONX.parse(localStorage.getItem(k) ?? "", fb),
  set: (k, v) => localStorage.setItem(k, JSONX.stringify(v)),
  getStr: (k, fb = "") => (localStorage.getItem(k) ?? fb)
};

/* ---------------------------
   Datasets (for autocomplete, labels)
--------------------------- */
const teachers = [
  "‡∏£‡∏®.‡∏î‡∏£.‡∏≠‡∏ô‡∏¥‡∏£‡∏≤‡∏ä ‡∏°‡∏¥‡πà‡∏á‡∏Ç‡∏ß‡∏±‡∏ç", "‡∏ú‡∏®.‡∏≠‡∏£‡∏ö‡∏∏‡∏©‡∏õ‡πå ‡∏ß‡∏∏‡∏í‡∏¥‡∏Å‡∏°‡∏•‡∏ä‡∏±‡∏¢", "‡∏ú‡∏®.‡∏î‡∏£.‡∏ö‡∏µ‡∏™‡∏∏‡∏î‡∏≤ ‡∏î‡∏≤‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏á", "‡∏ú‡∏®.‡∏î‡∏£.‡∏Ç‡∏ô‡∏¥‡∏©‡∏ê‡∏≤ ‡∏ô‡∏≤‡∏°‡∏µ",
  "‡∏≠.‡∏î‡∏£.‡∏Å‡∏≤‡∏ç‡∏à‡∏ô ‡∏ì ‡∏®‡∏£‡∏µ‡∏ò‡∏∞", "‡∏ú‡∏®.‡∏ô‡∏û‡∏î‡∏• ‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Å‡∏∏‡∏®‡∏•", "‡∏ú‡∏®.‡∏à‡∏™‡∏ï.‡∏ô‡∏û‡πÄ‡∏Å‡πâ‡∏≤ ‡∏ó‡∏≠‡∏á‡πÉ‡∏ö", "‡∏ú‡∏®.‡∏î‡∏£.‡∏ô‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ ‡∏ô‡∏≤‡∏Ñ‡πÄ‡∏à‡∏∑‡∏≠‡∏ó‡∏≠‡∏á",
  "‡∏ú‡∏®.‡∏î‡∏£.‡∏ô‡∏±‡∏é‡∏ê‡∏û‡∏±‡∏ô‡∏ò‡πå ‡∏ô‡∏≤‡∏Ñ‡∏û‡∏á‡∏©‡πå", "‡∏ú‡∏®.‡∏ô‡∏¥‡∏°‡∏¥‡∏ï ‡∏®‡∏£‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏≤", "‡∏≠.‡∏î‡∏£.‡∏û‡∏¥‡∏ó‡∏¢‡πå‡∏û‡∏¥‡∏°‡∏• ‡∏ä‡∏π‡∏£‡∏≠‡∏î", "‡∏ú‡∏®.‡∏î‡∏£.‡∏û‡∏≤‡∏ù‡∏±‡∏ô ‡∏î‡∏ß‡∏á‡πÑ‡∏û‡∏®‡∏≤‡∏•",
  "‡∏≠.‡∏î‡∏£.‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå ‡∏û‡∏¥‡∏ó‡∏±‡∏Å‡∏©‡πå‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Å‡∏∏‡∏•", "‡∏ú‡∏®.‡∏û‡∏µ‡∏£‡∏∞‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡πÄ‡∏™‡∏£‡∏µ‡∏Å‡∏∏‡∏•", "‡∏ú‡∏®.‡∏™‡∏°‡∏ä‡∏±‡∏¢ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏û‡∏á‡∏®‡πå‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå",
  "‡∏ú‡∏®.‡∏î‡∏£.‡∏™‡∏∏‡∏õ‡∏µ‡∏ï‡∏¥ ‡∏Å‡∏∏‡∏•‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏ú‡∏®.‡∏™‡∏¥‡∏ß‡∏≤‡∏•‡∏±‡∏¢ ‡∏à‡∏¥‡∏ô‡πÄ‡∏à‡∏∑‡∏≠", "‡∏ú‡∏®.‡∏î‡∏£.‡∏™‡∏∏‡∏û‡∏≤‡∏†‡∏£‡∏ì‡πå ‡∏ã‡∏¥‡πâ‡∏°‡πÄ‡∏à‡∏£‡∏¥‡∏ç", "‡∏ú‡∏®.‡∏î‡∏£.‡∏®‡∏£‡∏≤‡∏¢‡∏∏‡∏ó‡∏ò ‡∏ò‡πÄ‡∏ô‡∏®‡∏™‡∏Å‡∏∏‡∏•‡∏ß‡∏±‡∏í‡∏ô‡∏≤",
  "‡∏≠.‡∏î‡∏£.‡∏®‡∏¥‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡∏≤ ‡πÅ‡∏ß‡πà‡∏ß‡∏®‡∏£‡∏µ", "‡∏≠.‡∏î‡∏£.‡∏ß‡∏±‡∏ä‡∏£‡∏ä‡∏±‡∏¢ ‡∏Ñ‡∏á‡∏®‡∏¥‡∏£‡∏¥‡∏ß‡∏±‡∏í‡∏ô‡∏≤", "‡∏ú‡∏®.‡∏î‡∏£.‡∏ß‡∏±‡∏ô‡∏ó‡∏ô‡∏µ ‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏®‡∏∏‡∏†‡∏Å‡∏¥‡∏à", "‡∏£‡∏®.‡∏î‡∏£.‡∏¢‡∏∏‡∏û‡∏¥‡∏ô ‡∏™‡∏£‡∏£‡∏û‡∏Ñ‡∏∏‡∏ì"
];
const branches = ["IT", "ITI", "INE", "INET", "ITT"];

/* ---------------------------
   Autocomplete (accessible)
--------------------------- */
function attachAutocomplete(inputId, listId, dataset) {
  const inputEl = document.getElementById(inputId);
  const listEl = document.getElementById(listId);
  if (!inputEl || !listEl) return;

  let activeIndex = -1;
  inputEl.setAttribute("autocomplete", "off");
  listEl.setAttribute("role", "listbox");
  inputEl.setAttribute("role", "combobox");
  inputEl.setAttribute("aria-autocomplete", "list");
  inputEl.setAttribute("aria-expanded", "false");
  inputEl.setAttribute("aria-controls", listId);

  function close() {
    listEl.classList.remove("open");
    listEl.innerHTML = "";
    inputEl.setAttribute("aria-expanded", "false");
    activeIndex = -1;
  }
  function select(textValue) {
    inputEl.value = textValue;
    close();
    inputEl.dispatchEvent(new Event("change"));
  }
  function render(items) {
    listEl.innerHTML = "";
    if (!items.length) { close(); return; }
    items.forEach((name, i) => {
      const div = document.createElement("div");
      div.className = "dropdown-item";
      div.setAttribute("role", "option");
      div.setAttribute("id", `${listId}-opt-${i}`);
      div.textContent = name;
      div.addEventListener("mousedown", (e) => { e.preventDefault(); select(name); });
      listEl.appendChild(div);
    });
    inputEl.setAttribute("aria-expanded", "true");
    listEl.classList.add("open");
  }
  function filter(q) {
    const v = (q ?? "").trim().toLowerCase();
    if (!v) { close(); return; }
    render(dataset.filter(t => t.toLowerCase().includes(v)));
  }

  const runFilter = debounce(() => filter(inputEl.value), 80);
  inputEl.addEventListener("input", runFilter);
  inputEl.addEventListener("focus", () => { if (inputEl.value?.trim()) filter(inputEl.value); });
  inputEl.addEventListener("keydown", (e) => {
    const items = Array.from(listEl.querySelectorAll(".dropdown-item"));
    if ((e.key === "ArrowDown" || e.key === "ArrowUp") && items.length) {
      e.preventDefault();
      activeIndex = e.key === "ArrowDown"
        ? (activeIndex + 1) % items.length
        : (activeIndex - 1 + items.length) % items.length;
      items.forEach((el, i) => { el.style.background = (i === activeIndex) ? "#ffe9db" : ""; });
      inputEl.setAttribute("aria-activedescendant", `${listId}-opt-${activeIndex}`);
      return;
    }
    if (e.key === "Home" && items.length) { e.preventDefault(); activeIndex = 0; items[0].style.background = "#ffe9db"; }
    if (e.key === "End" && items.length) { e.preventDefault(); activeIndex = items.length - 1; items.at(-1).style.background = "#ffe9db"; }
    if (e.key === "Enter" && activeIndex >= 0 && items.length) { e.preventDefault(); select(items[activeIndex].textContent); }
    if (e.key === "Escape") { close(); }
  });

  document.addEventListener("click", (e) => {
    if (!e.target.closest(`#${inputId}`) && !e.target.closest(`#${listId}`)) close();
  });
}

/* ---------------------------
   Progress Gate (‡∏¢‡∏∑‡πà‡∏ô‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ 100%)
--------------------------- */
function initProgressGate() {
  const progressFill = $("#progress");
  const percentText = $("#percent");
  const examBtn = $("#examBtn");
  const remainingText = $("#remainingText");
  if (!progressFill || !percentText || !examBtn || !remainingText) return;

  let progressValue = Number(progressFill.getAttribute("data-progress") ?? "100");
  if (Number.isNaN(progressValue)) progressValue = 0;
  progressValue = clamp(progressValue, 0, 100);

  const updateProgress = () => {
    progressFill.style.width = progressValue + "%";
    text(percentText, progressValue + "%");
    if (progressValue >= 100) {
      examBtn.disabled = false;
      text(examBtn, "‚úì ‡∏¢‡∏∑‡πà‡∏ô‡∏™‡∏≠‡∏ö");
      hide(remainingText);
    } else {
      examBtn.disabled = true;
      text(examBtn, "üîí ‡∏¢‡∏∑‡πà‡∏ô‡∏™‡∏≠‡∏ö (‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö 100%)");
      text(remainingText, `‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å ${100 - progressValue}% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡πà‡∏ô‡∏™‡∏≠‡∏ö`);
      show(remainingText);
    }
  };
  updateProgress();
  examBtn.addEventListener("click", () => { if (!examBtn.disabled) window.location.href = "exam-submit.html"; });
}

/* ---------------------------
   Special-project-1 (‡πÄ‡∏™‡∏ô‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠)
--------------------------- */
function initSpecialProjectProposal() {
  attachAutocomplete("branchInput", "branchList", branches);
  attachAutocomplete("teacherInput", "teacherList", teachers);
  attachAutocomplete("coTeacherInput", "coTeacherList", teachers);

  const saveBtn = $("#btnSaveProposal");
  const goExam = $("#btnGoExam");
  const titleEl = $("#projectTitleInput");
  const advisorInProposal = $("#teacherInput");
  const coAdvisorInProposal = $("#coTeacherInput");
  const branchInProposal = $("#branchInput");
  const spError = $("#spError");
  const spSaved = $("#spSaved");

  saveBtn?.addEventListener("click", () => {
    const title = titleEl?.value?.trim() ?? "";
    if (!title) {
      show(spError); text(spError, "‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô"); hide(spSaved); return;
    }
    const advisor = advisorInProposal?.value?.trim();
    const coAdvisor = coAdvisorInProposal?.value?.trim();

    if (advisor && coAdvisor && advisor === coAdvisor) {
      show(spError); text(spError, "‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏•‡∏∞‡∏ó‡πà‡∏≤‡∏ô"); return;
    }

    localStorage.setItem("sp_title", title);
    if (advisor) localStorage.setItem("sp_advisor", advisor);
    if (coAdvisor) localStorage.setItem("sp_coadvisor", coAdvisor);
    if (branchInProposal?.value) localStorage.setItem("sp_branch", branchInProposal.value.trim());
    hide(spError); show(spSaved); setTimeout(() => hide(spSaved), 1600);
  });

  goExam?.addEventListener("click", () => {
    const title = titleEl?.value?.trim() ?? "";
    if (!title) { show(spError); text(spError, "‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏¢‡∏∑‡πà‡∏ô‡∏™‡∏≠‡∏ö"); return; }
    localStorage.setItem("sp_title", title);
    window.location.href = "exam-submit.html";
  });
}

/* ---------------------------
   exam-submit (‡∏¢‡∏∑‡πà‡∏ô‡∏™‡∏≠‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠)
--------------------------- */
function initExamSubmit() {
  const projTitle = $("#projTitle");
  if (projTitle) {
    const saved = localStorage.getItem("sp_title");
    projTitle.value = (saved?.trim() ? saved : "‡∏£‡∏∞‡∏ö‡∏ö AI Chatbot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ");
    projTitle.readOnly = true;
  }

  attachAutocomplete("advisorInput", "advisorList", teachers);
  attachAutocomplete("committee1Input", "committee1List", teachers);
  attachAutocomplete("committee2Input", "committee2List", teachers);
  attachAutocomplete("committee3Input", "committee3List", teachers);
  attachAutocomplete("committee4Input", "committee4List", teachers);

  const oldAdvisor = localStorage.getItem("sp_advisor");
  if (oldAdvisor && $("#advisorInput")) setVal("advisorInput", oldAdvisor);

  const submitExam = $("#submitExam");
  const examError = $("#examError");
  const examSuccess = $("#examSuccess");

  submitExam?.addEventListener("click", () => {
    const advisor = val("advisorInput");
    const c1 = val("committee1Input");
    const c2 = val("committee2Input");
    const c3 = val("committee3Input");
    const c4 = val("committee4Input");

    // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ + ‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏Ñ‡∏ô
    if (!advisor || !c1 || !c2) {
      show(examError); text(examError, "‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏Ñ‡∏ô");
      hide(examSuccess); return;
    }

    // ‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤/‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    const all = [advisor, c1, c2, c3, c4].filter(Boolean);
    if (!uniqueNonEmpty(all)) {
      show(examError); text(examError, "‚ö† ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏•‡∏∞‡∏ó‡πà‡∏≤‡∏ô"); hide(examSuccess); return;
    }

    hide(examError); show(examSuccess);
    localStorage.setItem("exam_advisor", advisor);
    localStorage.setItem("exam_committee", JSON.stringify([c1, c2, c3, c4].filter(Boolean)));
  });
}

/* ---------------------------
   Card Keyboard Accessibility
--------------------------- */
function initLinkCards() {
  const cards = $$(".link-card");
  if (!cards.length) return;

  cards.forEach(card => {
    card.addEventListener("focus", () => card.querySelector(".form-card")?.classList.add("focus-visible"));
    card.addEventListener("blur", () => card.querySelector(".form-card")?.classList.remove("focus-visible"));
    card.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        const url = card.getAttribute("href");
        if (url) window.location.href = url;
      }
    });
  });
}

/* ---------------------------
   Sidebar Toggle + KPI + Task Filter
--------------------------- */
function initSidebarToggle() {
  const btn = $("#menuToggle");
  const sidebar = $("#sidebar");
  if (!btn || !sidebar) return;
  if (btn.dataset.bound) return; // ‡∏Å‡∏±‡∏ô bind ‡∏ã‡πâ‡∏≥

  btn.dataset.bound = "1";
  btn.addEventListener("click", () => {
    const open = sidebar.classList.toggle("open");
    btn.setAttribute("aria-expanded", open ? "true" : "false");
  });
}

function initKPI() {
  ["kpiStudents", "kpiProjects", "kpiDone"].forEach(id => {
    const el = document.getElementById(id);
    if (!el) return;
    const raw = el.getAttribute("data-count");
    if (raw != null) {
      const n = Number(raw);
      if (!Number.isNaN(n)) el.textContent = n.toLocaleString("th-TH");
    }
  });

  $$(".kpi-link").forEach(a => {
    if (a.dataset.bound) return;
    a.dataset.bound = "1";
    a.addEventListener("keydown", e => { if (e.key === " ") { e.preventDefault(); a.click(); } });
  });
}

function initTaskFilter() {
  const searchInput = $("#searchInput");
  const statusFilter = $("#statusFilter");
  const taskList = $("#taskList");
  if (!taskList) return;
  if (taskList.dataset.bound) return;

  taskList.dataset.bound = "1";
  const apply = debounce(() => {
    const q = (searchInput?.value || "").toLowerCase().trim();
    const st = statusFilter?.value || "";
    Array.from(taskList.children).forEach(li => {
      const textContent = li.textContent.toLowerCase();
      const byText = !q || textContent.includes(q);
      const bySt = !st || (li.dataset.status === st);
      li.style.display = (byText && bySt) ? "" : "none";
    });
  }, 120);

  searchInput?.addEventListener("input", apply);
  statusFilter?.addEventListener("change", apply);
  apply();
}

/* ---------------------------
   Officer Requests (Tabs + Detail/Schedule)
--------------------------- */
function initOfficerRequests() {
  // Tabs
  const tabs = $$(".req-tab");
  const panels = $$("[role=tabpanel]");
  tabs.forEach(tab => {
    if (tab.dataset.bound) return;
    tab.dataset.bound = "1";
    tab.addEventListener("click", () => {
      tabs.forEach(t => t.classList.remove("active"));
      tab.classList.add("active");
      panels.forEach(p => p.hidden = true);
      const target = document.getElementById("tab-" + tab.dataset.tab);
      if (target) target.hidden = false;
    });
  });

  // Filters (topic)
  const topicSearch = $("#topicSearch");
  const topicStatus = $("#topicStatus");
  const topicRows = () => $$("#topicTable tbody tr");
  const applyTopic = debounce(() => {
    const q = (topicSearch?.value || "").toLowerCase().trim();
    const st = topicStatus?.value || "";
    topicRows().forEach(tr => {
      const okText = !q || tr.textContent.toLowerCase().includes(q);
      const okSt = !st || tr.dataset.status === st;
      tr.style.display = (okText && okSt) ? "" : "none";
    });
  }, 120);
  topicSearch?.addEventListener("input", applyTopic);
  topicStatus?.addEventListener("change", applyTopic);
  applyTopic();

  // Filters (project)
  const projSearch = $("#projSearch");
  const projStatus = $("#projStatus");
  const projRows = () => $$("#projTable tbody tr");
  const applyProj = debounce(() => {
    const q = (projSearch?.value || "").toLowerCase().trim();
    const st = (projStatus?.value || "");
    projRows().forEach(tr => {
      const okText = !q || tr.textContent.toLowerCase().includes(q);
      const okSt = !st || tr.dataset.status === st;
      tr.style.display = (okText && okSt) ? "" : "none";
    });
  }, 120);
  projSearch?.addEventListener("input", applyProj);
  projStatus?.addEventListener("change", applyProj);
  applyProj();

  // === Modals: Detail & Schedule (event delegation ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ===
  const detailModal = $("#reqDetail");
  const scheduleModal = $("#scheduleModal");
  const detailClose = $("#detailClose");
  const detailCancel = $("#detailCancel");
  const scheduleClose = $("#scheduleClose");
  const btnCancelSchedule = $("#btnCancelSchedule");
  const btnSaveSchedule = $("#btnSaveSchedule");

  const open = (m) => m?.setAttribute("aria-hidden", "false");
  const close = (m) => m?.setAttribute("aria-hidden", "true");

  detailClose?.addEventListener("click", () => close(detailModal));
  detailCancel?.addEventListener("click", () => close(detailModal));
  detailModal?.addEventListener("click", (e) => { if (e.target === detailModal) close(detailModal); });

  scheduleClose?.addEventListener("click", () => close(scheduleModal));
  btnCancelSchedule?.addEventListener("click", () => close(scheduleModal));
  scheduleModal?.addEventListener("click", (e) => { if (e.target === scheduleModal) close(scheduleModal); });

  const safeParseJSON = (str, fb) => { try { return JSON.parse(str); } catch { return fb; } };

  function fillDetail(row) {
    const map = {
      dType: "type", dDate: "date", dTeam: "team",
      dBranch: "branch", dAdvisor: "advisor",
      dCoadvisor: "coadvisor", dTopic: "title",
      dObjective: "objective", dResult: "result",
      dScope: "scope"
    };
    Object.entries(map).forEach(([id, key]) => {
      const v = row.dataset[key] ?? "-";
      const el = document.getElementById(id);
      if (el) el.textContent = v || "-";
    });

    // --- Students (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö data-students JSON ‡πÅ‡∏•‡∏∞ data-students1/2/...) ---
    let list = safeParseJSON(row.dataset.students, null);
    if (!Array.isArray(list)) {
      list = [];
      for (const name of row.getAttributeNames()) {
        if (/^data-students\d*$/i.test(name)) {
          const v = row.getAttribute(name);
          if (v && v.trim()) list.push(v.trim());
        }
      }
    }
    // ‡πÄ‡∏ï‡∏¥‡∏°‡∏•‡∏á #dStudents1 / #dStudents2 (‡∏ï‡∏≤‡∏° HTML ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    const s1 = $("#dStudents1"), s2 = $("#dStudents2");
    if (s1) s1.textContent = list[0] || "-";
    if (s2) s2.textContent = list[1] || (list[0] ? "" : "-");

    // ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
    const files = safeParseJSON(row.dataset.files, []);
    const ul = $("#dFiles");
    if (ul) {
      ul.innerHTML = "";
      if (Array.isArray(files) && files.length) {
        files.forEach(f => {
          const li = document.createElement("li");
          const a = document.createElement("a");
          a.href = f.url || "#"; a.target = "_blank"; a.rel = "noopener";
          a.textContent = f.name || "‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö";
          li.appendChild(a); ul.appendChild(li);
        });
      } else {
        const li = document.createElement("li"); li.textContent = "‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö ‚Äî"; ul.appendChild(li);
      }
    }
  }

  // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ñ‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏î ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
  let currentRowDetail = null;

  document.addEventListener("click", (e) => {
    const btnDetail = e.target.closest("[data-action=detail]");
    if (btnDetail) {
      const row = btnDetail.closest("tr");
      if (row) { currentRowDetail = row; fillDetail(row); open(detailModal); }
      return;
    }
    const btnSched = e.target.closest("[data-action=schedule]");
    if (btnSched) {
      const row = btnSched.closest("tr");
      if (row) {
        localStorage.setItem("schedule_target", JSON.stringify({
          date: row.dataset.date, team: row.dataset.team, title: row.dataset.title,
          advisor: row.dataset.advisor, branch: row.dataset.branch
        }));
        // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô‡∏•‡∏á‡∏ä‡πà‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤) ‚Äî ‡∏ä‡πà‡∏≠‡∏á‡∏ñ‡∏π‡∏Å disabled ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        const chair = $("#committee1Input");
        if (chair) chair.value = row.dataset.advisor || "";
        open(scheduleModal);
      }
    }
  });

  // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏ú‡∏π‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
  function bindOnce(el, ev, handler, flagName) {
    if (!el || el.dataset[flagName]) return;
    el.dataset[flagName] = "1";
    el.addEventListener(ev, handler);
  }
  const btnApprove = $("#btnApprove");
  const btnApproveEdit = $("#btnApproveEdit");
  const btnReject = $("#btnReject");
  const mapHTML = {
    "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥": '<span class="p p-ok">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</span>',
    "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç": '<span class="p p-edit">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</span>',
    "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô": '<span class="p p-no">‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô</span>'
  };
  function setRowStatus(row, statusText) {
    if (!row) return;
    row.dataset.status = statusText;
    const td = row.querySelector('td[data-col="status"]');
    if (td) td.innerHTML = mapHTML[statusText] || statusText;
    // ‡∏à‡∏≥‡∏Ñ‡πà‡∏≤‡∏•‡∏á localStorage ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡∏°/‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
    const team = row.dataset.team || "-";
    const title = row.dataset.title || "-";
    LS.set(`officer_status__${team}__${title}`, { status: statusText, updatedAt: new Date().toISOString() });
    // ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•
    detailModal?.setAttribute("aria-hidden", "true");
  }
  bindOnce(btnApprove, "click", () => setRowStatus(currentRowDetail, "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"), "bound");
  bindOnce(btnApproveEdit, "click", () => setRowStatus(currentRowDetail, "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"), "bound");
  bindOnce(btnReject, "click", () => setRowStatus(currentRowDetail, "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"), "bound");

  // === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≠‡∏ö ===
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≠‡∏ö: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤/‡∏´‡πâ‡∏≠‡∏á + ‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£ 3 ‡∏Ñ‡∏ô (‡∏ä‡πà‡∏≠‡∏á 2‚Äì4) ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô
  // ‡πÅ‡∏ô‡∏ö autocomplete ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏î‡πâ (2‚Äì4)
  attachAutocomplete("committee2Input", "committee2List", teachers);
  attachAutocomplete("committee3Input", "committee3List", teachers);
  attachAutocomplete("committee4Input", "committee4List", teachers);

  // ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bind ‡∏ã‡πâ‡∏≥)
  if (btnSaveSchedule && !btnSaveSchedule.dataset.bound) {
    btnSaveSchedule.dataset.bound = "1";
    btnSaveSchedule.addEventListener("click", () => {
      const d = $("#examDate")?.value;
      const t = $("#examTime")?.value;
      const r = $("#examRoom")?.value?.trim();

      const cA = $("#committee1Input")?.value?.trim(); // ‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô (optional / disabled)
      const c1 = $("#committee2Input")?.value?.trim();
      const c2 = $("#committee3Input")?.value?.trim();
      const c3 = $("#committee4Input")?.value?.trim();

      if (!d || !t || !r) { alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö / ‡πÄ‡∏ß‡∏•‡∏≤ / ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≠‡∏ö ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö"); return; }
      if (!c1 || !c2 || !c3) { alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 3 ‡∏Ñ‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô)"); return; }

      const set = new Set([c1, c2, c3, cA].filter(Boolean));
      if (set.size < ([c1, c2, c3].filter(Boolean).length + (cA ? 1 : 0))) {
        alert("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£/‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏•‡∏∞‡∏ó‡πà‡∏≤‡∏ô"); return;
      }

      const target = LS.get("schedule_target", null);
      const payload = {
        ...target,
        examDate: d, examTime: t, room: r,
        chair: cA || null,
        committees: [c1, c2, c3],
        savedAt: new Date().toISOString()
      };
      LS.set("schedule_last_saved", payload);

      alert(
        `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
‡∏ó‡∏µ‡∏°/‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${payload?.team || "-"} / ${payload?.title || "-"}
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${d}
‡πÄ‡∏ß‡∏•‡∏≤: ${t}
‡∏´‡πâ‡∏≠‡∏á: ${r}
‡∏õ‡∏£‡∏∞‡∏ò‡∏≤‡∏ô: ${payload.chair || "-"}
‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£:
  1) ${c1}
  2) ${c2}
  3) ${c3}`
      );
      close(scheduleModal);
    });
  }
}

/* ---------------------------
   Recent Table (Dashboard) helpers
--------------------------- */
function initDashboardHelpers() {
  const searchInput = $("#qSearch");
  const statusFilter = $("#statusFilter");
  const branchFilter = $("#branchFilter");
  const table = $("#recentTable");
  if (!table) return;

  const rows = () => $$("#recentTable tbody tr");

  const applyFilters = debounce(() => {
    const q = (searchInput?.value || '').toLowerCase().trim();
    const st = statusFilter?.value || '';
    const br = branchFilter?.value || '';
    let visible = 0;

    rows().forEach(tr => {
      const textC = tr.textContent.toLowerCase();
      const rSt = tr.dataset.status || '';
      const rBr = tr.dataset.branch || '';
      const ok = (!q || textC.includes(q)) && (!st || rSt === st) && (!br || rBr === br);
      tr.style.display = ok ? '' : 'none';
      if (ok) visible++;
    });

    const counter = $("#resultCounter");
    if (counter) counter.textContent = `‡πÅ‡∏™‡∏î‡∏á ${visible} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;

    updateSummaries();
    buildNotifications();
  }, 120);

  function updateSummaries() {
    const visibleRows = rows().filter(tr => tr.style.display !== 'none');
    const pending = visibleRows.filter(tr => tr.dataset.status === '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥').length;
    const dueSoon = visibleRows.filter(tr => {
      const today = new Date();
      const in14 = new Date(today.getTime() + 14 * 24 * 60 * 60 * 1000);
      const dd = tr.dataset.duedate ? new Date(tr.dataset.duedate) : null;
      return dd && dd <= in14 && dd >= today;
    }).length;
    const missing = visibleRows.filter(tr => tr.dataset.docs === 'missing').length;

    const s1 = $("#statPending"); if (s1) s1.textContent = pending;
    const s2 = $("#statDueSoon"); if (s2) s2.textContent = dueSoon;
    const s3 = $("#statMissingDocs"); if (s3) s3.textContent = missing;
  }

  function buildNotifications() {
    const list = $("#notifyList"); if (!list) return;
    list.innerHTML = '';
    const visibleRows = rows().filter(tr => tr.style.display !== 'none');
    visibleRows.forEach(tr => {
      if (tr.dataset.status === '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥') {
        const li = document.createElement("li");
        li.innerHTML = `üîî <strong>${tr.children[1]?.textContent || "‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô"}</strong> ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥`;
        list.appendChild(li);
      }
    });
    const count = $("#notifyCount"); if (count) count.textContent = list.children.length;
  }

  ['qSearch', 'statusFilter', 'branchFilter'].forEach(id => {
    const el = document.getElementById(id);
    el?.addEventListener('input', applyFilters);
    el?.addEventListener('change', applyFilters);
  });
  applyFilters();
}

/* ---------------------------
   Advisor Dashboard + Feedback (merged)
--------------------------- */
function initAdvisorDashboardAndFeedback() {
  // ‡∏£‡∏∞‡∏ö‡∏∏ advisor ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ?advisor > body[data-advisor] > localStorage
  const urlAdvisor = new URLSearchParams(location.search).get("advisor");
  const bodyAdvisor = document.body.getAttribute("data-advisor")?.trim();
  const storedAdvisor = LS.getStr("current_advisor", "").trim();
  const currentAdvisor = (urlAdvisor || bodyAdvisor || storedAdvisor || "").trim();
  if (currentAdvisor) localStorage.setItem("current_advisor", currentAdvisor);

  const nameEl = $("#advisorName");
  if (nameEl) nameEl.textContent = currentAdvisor ? `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${currentAdvisor}` : "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: -";

  // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÉ‡∏ô #advisorTable ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  const tbody = $("#advisorTable tbody");
  if (tbody) {
    Array.from(tbody.querySelectorAll("tr")).forEach(tr => {
      const adv = tr.dataset.advisor?.trim() || "";
      tr.style.display = (!currentAdvisor || adv === currentAdvisor) ? "" : "none";
    });

    // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
    const qInput = $("#adSearch");
    const typeSel = $("#adType");
    const stSel = $("#adStatus");
    const apply = debounce(() => {
      const q = (qInput?.value || "").toLowerCase().trim();
      const ty = (typeSel?.value || "");
      const st = (stSel?.value || "");

      let all = 0, pend = 0, exam = 0;
      Array.from(tbody.querySelectorAll("tr")).forEach(tr => {
        const visibleByAdvisor = tr.dataset.advisor?.trim() === currentAdvisor || !currentAdvisor;
        if (!visibleByAdvisor) { tr.style.display = "none"; return; }

        const textC = tr.textContent.toLowerCase();
        const okQ = !q || textC.includes(q);
        const okT = !ty || tr.dataset.type === ty;
        const okS = !st || tr.dataset.status === st;

        const showRow = okQ && okT && okS;
        tr.style.display = showRow ? "" : "none";

        if (showRow) {
          all++;
          if (tr.dataset.status === "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à") pend++;
          if (tr.dataset.status === "‡∏£‡∏≠‡∏™‡∏≠‡∏ö") exam++;
        }
      });

      const fmt = n => Number(n).toLocaleString("th-TH");
      const kAll = $("#kpiAll");
      const kPending = $("#kpiPending");
      const kExam = $("#kpiExam");
      if (kAll) kAll.textContent = fmt(all);
      if (kPending) kPending.textContent = fmt(pend);
      if (kExam) kExam.textContent = fmt(exam);
    }, 120);

    ["input", "change"].forEach(ev => {
      qInput?.addEventListener(ev, apply);
      typeSel?.addEventListener(ev, apply);
      stSel?.addEventListener(ev, apply);
    });
    apply();
  }

  // --- Feedback modal (‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á id ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå) ---
  const modal = $("#fbModal");
  if (!modal) return; // ‡πÑ‡∏°‡πà‡∏°‡∏µ modal ‡∏ô‡∏µ‡πâ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô feedback ‡πÑ‡∏õ (‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)

  const btnClose = $("#fbClose");
  const btnCancel = $("#fbCancel");
  const btnSave = $("#fbSave");
  const btnOpenAll = $("#btnOpenAll");

  const mTeam = $("#mTeam");
  const mBranch = $("#mBranch");
  const mTitle = $("#mTitle");
  const mFiles = $("#mFiles");
  const mPercent = $("#mPercent");
  const mComment = $("#mComment");
  const mError = $("#mError");
  const mSaved = $("#mSaved");

  let currentKey = null;
  const openModal = () => modal?.setAttribute("aria-hidden", "false");
  const closeModal = () => modal?.setAttribute("aria-hidden", "true");

  modal?.addEventListener("click", (e) => { if (e.target === modal) closeModal(); });
  document.addEventListener("keydown", (e) => { if (e.key === "Escape") closeModal(); });
  btnClose?.addEventListener("click", closeModal);
  btnCancel?.addEventListener("click", closeModal);

  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô (event delegation ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
  document.addEventListener("click", (e) => {
    const btn = e.target.closest("[data-action='open-feedback']");
    if (!btn) return;
    const tr = btn.closest("tr"); if (!tr) return;

    const team = tr.dataset.team || "-";
    const branch = tr.dataset.branch || "-";
    const title = tr.dataset.title || "-";
    const files = JSONX.parse(tr.dataset.files || "[]", []);

    text(mTeam, team); text(mBranch, branch); text(mTitle, title);

    if (mFiles) {
      mFiles.innerHTML = "";
      if (Array.isArray(files) && files.length) {
        files.forEach(f => {
          const li = document.createElement("li");
          const a = document.createElement("a");
          a.href = f.url || "#"; a.target = "_blank"; a.rel = "noopener";
          a.textContent = f.name || "‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö";
          li.appendChild(a); mFiles.appendChild(li);
        });
        show(btnOpenAll);
      } else {
        const li = document.createElement("li"); li.textContent = "‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö ‚Äî";
        mFiles.appendChild(li); hide(btnOpenAll);
      }
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    currentKey = `fb_${localStorage.getItem("current_advisor") || "-"}__${team}__${title}`;
    const saved = LS.get(currentKey, null);
    if (mPercent) mPercent.value = saved?.percent ?? "";
    if (mComment) mComment.value = saved?.comment ?? "";

    hide(mError); hide(mSaved); openModal();
  });

  btnOpenAll?.addEventListener("click", () => {
    const links = $$("#mFiles a");
    links.forEach(a => { if (a.href && a.href !== "#") window.open(a.href, "_blank", "noopener"); });
  });

  btnSave?.addEventListener("click", () => {
    let p = Number(mPercent?.value);
    if (Number.isNaN(p)) p = 0;
    p = clamp(p, 0, 100);
    if (Number.isNaN(p)) { show(mError); hide(mSaved); return; }

    const payload = {
      advisor: localStorage.getItem("current_advisor") || "-",
      team: mTeam?.textContent || "-",
      title: mTitle?.textContent || "-",
      percent: p,
      comment: (mComment?.value || "").trim(),
      savedAt: new Date().toISOString()
    };
    LS.set(currentKey || "fb_temp", payload);
    hide(mError); show(mSaved);
    setTimeout(() => { hide(mSaved); closeModal(); }, 900);
  });
}

/* ---------------------------
   Init (single DOMContentLoaded)
--------------------------- */
document.addEventListener("DOMContentLoaded", () => {
  // Generic UI
  initLinkCards();
  initSidebarToggle();
  initKPI();
  initTaskFilter();

  // Feature pages (safe to run)
  initProgressGate();
  initSpecialProjectProposal();
  initExamSubmit();
  initOfficerRequests();
  initDashboardHelpers();

  // Advisor-specific (‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)
  initAdvisorDashboardAndFeedback();
});
